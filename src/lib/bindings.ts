/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	async greet(name: string): Promise<string> {
		return await TAURI_INVOKE('greet', { name });
	},
	async rconCommand(serverId: string, command: string): Promise<Result<string, string>> {
		try {
			return {
				status: 'ok',
				data: await TAURI_INVOKE('rcon_command', { serverId, command })
			};
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	},
	async listUsers(serverId: string): Promise<Result<ServerUser[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('list_users', { serverId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	},
	async addServer(server: ServerConfig): Promise<Result<boolean, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('add_server', { server }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	},
	async getServers(): Promise<Result<ServerConfig[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_servers') };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	},
	async removeServer(serverId: string): Promise<Result<boolean, string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('remove_server', { serverId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	},
	async getChat(serverId: string): Promise<Result<string[], string>> {
		try {
			return { status: 'ok', data: await TAURI_INVOKE('get_chat', { serverId }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: 'error', error: e as any };
		}
	}
};

/** user-defined events **/

export const events = __makeEvents__<{
	newServerListEvent: NewServerListEvent;
}>({
	newServerListEvent: 'new-server-list-event'
});

/** user-defined constants **/

/** user-defined types **/

export type ArkVersion = { type: 'ASA' } | { type: 'ASE' };
export type NewServerListEvent = ServerConfig[];
export type ServerConfig = {
	id: string | null;
	server_type: ArkVersion;
	name: string;
	host: string;
	query_port: number;
	rcon_port: number;
	rcon_password: string;
};
export type ServerUser = { name: string; id: string };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE, Channel as TAURI_CHANNEL } from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow';

type __EventObj__<T> = {
	listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> = { status: 'ok'; data: T } | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg)
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case 'listen':
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case 'once':
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case 'emit':
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					}
				});
			}
		}
	);
}
